{"version":3,"sources":["components/LoginForm.js","actions/authActions.js","components/SignupForm.js","components/Start.js","components/Planner.js","components/BrowseFood.js","apiConfig.js","components/BrowseActivities.js","reducers/authReducer.js","reducers/index.js","reducers/tripReducer.js","actions/types.js","config/fbConfig.js","store.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","handleChange","e","setState","target","id","value","handleSubmit","preventDefault","signIn","state","handleClick","signOut","email","password","this","authError","auth","uid","to","className","onSubmit","htmlFor","type","onChange","onClick","React","Component","connect","console","log","firebase","dispatch","creds","credentials","getState","getFirebase","signInWithEmailAndPassword","then","catch","err","SignupForm","signUp","firstName","lastName","newUser","getFirestore","firestore","createUserWithEmailAndPassword","response","collection","doc","user","set","Start","handleClickLogin","action","handleClickSignUp","Planner","BrowseFood","restaurants","fetch","ENDPOINT","json","data","restaurantItems","map","restaurant","key","location_id","name","description","price","is_closed","open_now_text","address","BrowseActivities","initState","authReducer","message","combineReducers","trip","location","activity","firestoreReducer","firebaseReducer","fbConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","store","thunk","createStore","rootReducer","compose","applyMiddleware","withExtraArgument","reduxFirestore","rrfProps","config","createFirestoreInstance","App","path","render","exact","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.cf74acab.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from 'react-redux';\nimport { signIn, signOut } from '../actions/authActions'\nimport { Redirect } from \"react-router-dom\";\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: ''\n    }\n  }\n\n  handleChange = (e)=>{\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n\n  handleSubmit = (e)=>{\n    e.preventDefault(); //prevent submitting the default values\n    \n    this.props.signIn(this.state); //this.state is the credentials (email and password) from the state of the class\n  }\n\n  handleClick = () => {\n    this.props.signOut();\n  }\n\n\n  render() {\n    const { authError, auth } = this.props;\n    \n    //want to redirect to the planner if we are logged in\n    if (auth.uid) return <Redirect to='/planner' />\n\n    return (\n    <div className = \"container\"> \n    <form onSubmit={this.handleSubmit} className=\"white\">\n      <h5 className=\"grey-test test-darken-3\">Sign in</h5>\n      <div className=\"input-field\">\n        <label htmlFor=\"email\">Email</label>\n        <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\n      </div>\n      <div className=\"input-field\">\n        <label htmlFor=\"password\">Password</label>\n        <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\n      </div>\n      <div className=\"input-field\">\n        <button className=\"ptn pink lighten-1 z-depth-0\">Login</button>\n      </div>\n      <div>\n        { authError ? <p>{authError}</p> : null}\n      </div>\n    </form>\n    <div>\n        <button onClick = {this.handleClick} >Sign out</button>\n    </div>\n\n    </div>);\n  }\n}\n\nconst mapStateToProps = (state) => {\n  console.log(state)\n  return {\n    authError: state.auth.authError,\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (creds) => dispatch(signIn(creds)),\n    signOut: () => dispatch(signOut())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\n","// alla actions för authentication. Dessa är för att logga in, logga ut samt registrera ny användare\n\nexport const signIn = (credentials) => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n       \n        firebase.auth().signInWithEmailAndPassword(\n            credentials.email,\n            credentials.password\n        ).then(() => {\n            dispatch({ type: 'LOGIN_SUCCESS'});\n        }).catch((err) => {\n            dispatch({ type: 'LOGIN_ERROR', err})\n        });\n    }\n}\n\nexport const signOut = () => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signOut().then( ()=> {\n            dispatch({type: 'SIGNOUT_SUCCESS' });\n        }).catch((err) => {\n            dispatch({ type: 'SIGNOUT_ERROR', err})\n        });\n    }\n}\n\nexport const signUp = (newUser) => {\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\n        const firebase = getFirebase();\n        const firestore = getFirestore();\n\n        // create a new user in firebase\n        // doc(response.user.uid) kommer ge oss id från användaren i authentication, dvs. vi kommmer skapa en användare i databasen med samma id som i authentication (annars blir id random, vilket vi inte vill)\n        firebase.auth().createUserWithEmailAndPassword(\n            newUser.email,\n            newUser.password\n        ).then((response) => {\n            //skapar en ny users i databasen, här kan vi lägga in vilken information vi vill (tror jag)\n            return firestore.collection('users').doc(response.user.uid).set({\n                firstName: newUser.firstName,\n                lastName: newUser.lastName,\n                email: newUser.email\n            })\n        }).then(() => {\n            dispatch({ type: 'SIGNUP_SUCCESS' })\n        }).catch(err=> {\n            dispatch({ type: 'SIGNUP_ERROR', err})\n        })\n    }\n}","import React from \"react\";\nimport { connect } from 'react-redux';\nimport { signUp } from '../actions/authActions'\nimport { Redirect } from \"react-router-dom\";\n\n\nclass SignupForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      firstName: '',\n      lastName: ''\n    }\n  }\n\n  handleChange = (e)=>{\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n\n  handleSubmit = (e)=>{\n    e.preventDefault(); //prevent submitting the default values\n    this.props.signUp(this.state);\n  }\n\n\n  render() {\n\n    // om vi är inloggad ska vi inte kunna signa up\n    const {auth} = this.props;\n    if (auth.uid) return <Redirect to='/planner' />\n\n\n    return (\n    <div className = \"container\"> \n    <form onSubmit={this.handleSubmit} className=\"white\">\n      <h5 className=\"grey-test test-darken-3\">Sign up</h5>\n      <div className=\"input-field\">\n        <label htmlFor=\"email\">Email</label>\n        <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\n      </div>\n      <div className=\"input-field\">\n        <label htmlFor=\"password\">Password</label>\n        <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\n      </div>\n      <div className=\"input-field\">\n        <label htmlFor=\"fistName\">First Name</label>\n        <input type=\"text\" id=\"firstName\" onChange={this.handleChange}/>\n      </div>\n      <div className=\"input-field\">\n        <label htmlFor=\"lastName\">Last Name</label>\n        <input type=\"text\" id=\"lastName\" onChange={this.handleChange}/>\n      </div>\n      <div className=\"input-field\">\n        <button className=\"ptn pink lighten-1 z-depth-0\">Sign up</button>\n      </div>\n    </form>\n\n    </div>);\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signUp: (newUser) => dispatch(signUp(newUser))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupForm);\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\n\nclass Start extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      action: null\n    }\n  }\n\n  handleClickLogin = () => {\n    console.log('login')\n    this.setState({\n      action: 'login'\n    })\n  }\n\n  handleClickSignUp = () => {\n    console.log('signup')\n    this.setState({\n      action: 'signup'\n    })\n  }\n\n\n\n  render() {\n\n    // om vi är inloggade ska vi inte kunna gå tillbaka till start-sidan\n    const {auth} = this.props;\n    if (auth.uid) return <Redirect to='/planner' />\n\n    if (this.state.action){\n      if (this.state.action==='login'){\n        return <Redirect to='/logIn' />\n      }\n      if (this.state.action==='signup'){\n        return <Redirect to='/signUp' />\n      }\n    }\n    \n    // <Button variant=\"outlined\" color=\"secondary\" id = 'login' onClick={this.handleClickLogin}>Log in</Button>\n    // <Button variant=\"outlined\" color=\"secondary\" id= 'signup' onClick={this.handleClickSignUp}>Sign Up</Button>\n    return (\n    <div> \n      <b> Welcome to TravelUp </b>\n      <br/>\n      <i>you personal trip planner</i>\n      <br/>\n      <button id = 'login' onClick={this.handleClickLogin}>Log in</button>\n      <button id= 'signup' onClick={this.handleClickSignUp}>Sign Up</button>\n    </div>);\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth\n  }\n}\n\n\n\nexport default connect(mapStateToProps)(Start);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { signOut } from '../actions/authActions'\nimport { Redirect } from \"react-router-dom\";\n\n\nclass Planner extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\nhandleClick = () => {\n    this.props.signOut();\n}\n\n  render() {\n    // om vi inte är inloggade ska vi inte kunna se planner-sidan\n    const {auth} = this.props;\n    if (!auth.uid) return <Redirect to='/' />\n\n\n    return (\n    <div className = \"container\">\n      <div> PLANERA </div>\n      <div>\n        <button onClick = {this.handleClick} >Sign out (ska tas bort sen)</button>\n    </div>\n    </div>);\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth\n  }\n}\n\n//behövde sign-out här för att kunna se så att redirecten funkar som den ska, ska senare tas bort\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signOut: () => dispatch(signOut())\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Planner);\n","import React from \"react\";\nimport {ENDPOINT, API_KEY} from \"../apiConfig.js\";\nconst location_id = \"189852\"\n\nclass BrowseFood extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state ={\n      restaurants: []\n    }\n  }\n\n  componentWillMount(){\n    fetch(ENDPOINT+\"list?restaurant_tagcategory_standalone=10591&lunit=km&restaurant_tagcategory=10591&limit=30&prices_restaurants=10953%252C10955&restaurant_mealtype=10598%252C10599&currency=SEK&lang=en_US&location_id=\"+location_id, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"tripadvisor1.p.rapidapi.com\",\n        \"x-rapidapi-key\": API_KEY\n      }\n    })\n  .then(response => response.json())\n  .then(data => this.setState({ restaurants: data.data }))\n  }\n\n  render() {\n    const restaurantItems = this.state.restaurants.map(restaurant => (\n      <div key={restaurant.location_id}>\n        <h4>{restaurant.name} </h4>\n        <h6>Description</h6>\n        <p>{restaurant.description}</p>\n        <h5>Price Range: {restaurant.price} </h5>\n        {restaurant.is_closed ? <h5>Closed</h5> : \n          <h5>{restaurant.open_now_text}</h5>}\n        <p>Address: {restaurant.address} </p>\n        <br />\n      </div>\n    ));\n    return (\n      <div>\n        <h1>Restaurants</h1>\n        {restaurantItems}\n      </div>\n    );\n  }\n}\n\nexport default BrowseFood;\n","export const ENDPOINT = \"https://tripadvisor1.p.rapidapi.com/restaurants/\"; // TripAdvisor restaurant API\nexport const API_KEY = \"ad069d8abemsh733a84ea72256cfp16598ajsnbdbcc9cb7ad6\";\n","import React from \"react\";\n\nclass BrowseActivities extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return <div> ACTIVITIES </div>;\n  }\n}\n\nexport default BrowseActivities;\n","const initState = {\n    authError: null\n};\n\nconst authReducer = (state = initState, action) => {\n    switch(action.type){\n        case 'LOGIN_ERROR':\n            console.log(\"login error\");\n            return {\n                ...state,   // så att vi inte overwrite något i state\n                authError: 'Login failed'   // overwrite:ar det som var i authError\n            }\n        case 'LOGIN_SUCCESS':\n            console.log('login success');\n            return{\n                ...state,\n                authError: null\n            }\n        case 'SIGNOUT_SUCCESS':\n            console.log('signout success');\n            return state;\n\n        case 'SIGNOUT_ERROR':   //vet ej om detta behövs\n            console.log('signout failed')\n            return state;\n\n        case 'SIGNUP_SUCCESS':\n            console.log('Signup success');\n            return {\n                ...state,\n                authError: null\n            }\n        case 'SIGNUP_ERROR':\n            console.log('signup error');\n            return{\n                ...state,\n                authError: action.err.message\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport default authReducer;","import { combineReducers } from \"redux\";\n\n// Import all reducers\nimport tripReducer from \"./tripReducer\";\nimport authReducer from \"./authReducer\";\n\nimport { firestoreReducer } from 'redux-firestore';\nimport { firebaseReducer } from 'react-redux-firebase';\n\n// Export all reducers combined with pattern\n// state: reducer\n// Example - the \"trip\" state is affected by the \"tripReducer\".\nexport default combineReducers({\n  trip: tripReducer,\n  auth: authReducer,\n  // npm install react-redux-firebase redux-firestore \n  firestore: firestoreReducer,  //will sync our firestore data with the store state\n  firebase: firebaseReducer     //sync authentication status on firebase with our redux app. Will detect if we signin/signout of the auth-servie on firebase and will update this state accordingly\n});\n","// Här finns reducern relevant för resor/trips.\n// I vår reducer samlar vi alla möjliga typer av actions för en viss del av state.\n// I detta fall är vi intresserade av trip-statet. När vi planerar en resa/trip vill vi kunna utföra olika\n// handlingar/actions. Exempel är att bestämma resmål (SET_LOCATION), lägga till en aktivitet (ADD_ACTIVITY).\n// Vi hanterar de möjliga actions genom ett switch-statement.\n// Varje case ska returnera en uppdaterad version av state, alternativt det oförändrade statet.\n// Exempel:\n// action.type = ADD_ACTIVITY. Då är det aktivitets-delen av statet vi är intresserade av att ändra,\n// rimligen är aktiviteter för vår resa en lista av aktivitetsobjekt. Så det nya statet bör vara en uppdaterad lista där\n// den nya aktiviteten, som hittas i action.activity, läggs till de redan existerande aktiviterna, vilka hittas i 'state'.\n// I SET_LOCATION är vi endast intresserade av returnera resmålet i fråga. state kanske tidigare var \"London\". Nu har vi kallat på\n// setLocation med indata \"Stockholm\", varpå vi i reducern helt enkelt returnerar just \"Stockholm\", som hittas i action.location. \"Stockholm\"\n// är det nya location-statet.\n// Kom ihåg att varje action har en .type och en .payload. Vad payloaden/datat är beror på typen. I fallet SET_LOCATION är vår payload en plats,\n// därför kallar vi den payloaden för location. I fallet ADD_ACTIVITY är payloaden ett activity-objekt, varför vi kallar payloaden för activity.\n\nimport { SET_LOCATION, ADD_ACTIVITY } from \"../actions/types\";\n\nexport default function tripReducer(state = {}, action) {\n  switch (action.type) {\n    case SET_LOCATION:\n      return action.location;\n    case ADD_ACTIVITY:\n      return [action.activity, ...state];\n    default:\n      return state;\n  }\n}\n","// Deklarering av typer av ACTIONS\nexport const SET_LOCATION = \"SET_LOCATION\";\nexport const ADD_ACTIVITY = \"ADD_ACTIVITY\";\n","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nexport const fbConfig = {\n    apiKey: \"AIzaSyBDf0iV4dj6XPracATb2Or9oN6i1lma9hk\",\n    authDomain: \"travelup-2fcd0.firebaseapp.com\",\n    databaseURL: \"https://travelup-2fcd0.firebaseio.com\",\n    projectId: \"travelup-2fcd0\",\n    storageBucket: \"travelup-2fcd0.appspot.com\",\n    messagingSenderId: \"678217901276\",\n    appId: \"1:678217901276:web:586c6cb1ccf06dc9cc0019\"\n  };\n\n// Initialize Firebase\nfirebase.initializeApp(fbConfig);\nfirebase.firestore(); //.settings({ timestampsInSnapshots: true})   //changes how firebase work on time stamps, vet ej om det behövs? tror inte\n\nexport default firebase;","//import SidebarPresentation from \"./presentations/sidebarPresentation\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/index\";\nimport { Provider } from 'react-redux';\n\nimport { reduxFirestore, createFirestoreInstance, getFirestore } from 'redux-firestore'\nimport { ReactReduxFirebaseProvider, getFirebase } from 'react-redux-firebase'\n\nimport firebase, { fbConfig } from './config/fbConfig'  // fbConfig är konfigurationen från vårt projekt i firestore\n\nconst initialState = {};  //används ej nu, vet inte vad man ska ha den till (Calle kanske vet?) /Stina\nconst middleware = [thunk];\n\n/*\nDet som var tidigare i store, innan firebase blev tillagt\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  applyMiddleware(...middleware)\n);\n*/\n\n\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(\n      thunk.withExtraArgument({ getFirebase, getFirestore })  // för att koppla till firebase och firestore\n    ),\n    reduxFirestore(firebase, fbConfig)\n  )\n)\n\nexport const rrfProps = {\n  firebase,\n  config: fbConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance\n}\n\nexport default store;\n\n\n// används ej just nu vad jag vet /Stina\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({});\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nimport LoginForm from \"./components/LoginForm.js\";\nimport SignupForm from \"./components/SignupForm.js\";\nimport Start from \"./components/Start.js\";\nimport Planner from \"./components/Planner\";\nimport BrowseFood from \"./components/BrowseFood.js\";\nimport BrowseActivities from \"./components/BrowseActivities.js\";\n\nimport { ReactReduxFirebaseProvider, getFirebase } from \"react-redux-firebase\";\n\nimport store, { rrfProps } from \"./store\";\n\n// start är main-page. Den första sidan man kommer till när appen startas\n// vi behöver ha en ReactReducFirebaseProvider runt vårt projekt för att koppla till firebase (som jag fattat det, ej säker) /Stina\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Provider store={store}>\n          <ReactReduxFirebaseProvider {...rrfProps}>\n            <div className=\"App\">\n              <main>\n                <Switch>\n                  <Route\n                    path=\"/logIn\"\n                    render={props => <LoginForm {...props} />}\n                  />\n                  <Route\n                    path=\"/signUp\"\n                    render={props => <SignupForm {...props} />}\n                  />\n                  <Route\n                    path=\"/\"\n                    render={props => <Start {...props} />}\n                    exact\n                  />\n                  <Route\n                    path=\"/planner\"\n                    render={props => <Planner {...props} />}\n                  />\n                  <Route\n                    path=\"/food\"\n                    render={props => <BrowseFood {...props} />}\n                  />\n                  <Route\n                    path=\"/activities\"\n                    render={props => <BrowseActivities {...props} />}\n                  />\n                </Switch>\n              </main>\n            </div>\n          </ReactReduxFirebaseProvider>\n        </Provider>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}